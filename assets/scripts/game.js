// Define the game object to hold all current state information.
let game = {
    // Stores the sequence of moves generated by the computer.
    currentGame: [],
  
    // Stores the sequence of moves input by the player.
    playerMoves: [],
  
    // Tracks the player's score.
    score: 0,
  
    // Tracks the turn number.
    turnNumber: 0,
  
    // Array of available button IDs representing the game inputs
    choices: ["button1", "button2", "button3", "button4"],
  
    // Flag to determine if the game has officially started
    gameStarted: false
  };
  
  // Function to start a new game
  function newGame() {
    // Set gameStarted flag to true
    game.gameStarted = true;
  
    // Reset the computer's sequence
    game.currentGame = [];
  
    // Reset the player's move history
    game.playerMoves = [];
  
    // Reset the score
    game.score = 0;
  
    // Loop through all elements with the class "circle" (the game buttons)
    for (let circle of document.getElementsByClassName("circle")) {
      // Check if this button hasn't already been set to listen for clicks
      if (circle.getAttribute("data-listener") !== "true") {
        // Add a click event listener to handle player input
        circle.addEventListener("click", (e) => {
          // âœ… New logic: if game hasn't started, alert and return early
          if (!game.gameStarted) {
            alert("Please start the game first");
            return;
          }
  
          // Get the ID of the clicked button (e.g. "button1")
          let move = e.target.getAttribute("id");
  
          // Light up the button that was clicked
          lightsOn(move);
  
          // Record the move in the player's sequence
          game.playerMoves.push(move);
  
          // Check if the player's move matches the game sequence
          playerTurn();
        });
  
        // Mark this element as already listening to prevent duplicate listeners
        circle.setAttribute("data-listener", "true");
      }
    }
  
    // Update the DOM to reflect the reset score
    showScore();
  
    // Start the first round by adding a random turn
    addTurn();
  }
  
  // Function to add a new move to the currentGame sequence
  function addTurn() {
    game.playerMoves = [];
    game.currentGame.push(game.choices[Math.floor(Math.random() * 4)]);
    showTurns();
  }
  
  // Function to visually light up a button in the DOM
  function lightsOn(circ) {
    document.getElementById(circ).classList.add("light");
    setTimeout(() => {
      document.getElementById(circ).classList.remove("light");
    }, 400);
  }
  
  // Function to update the score display in the DOM
  function showScore() {
    document.getElementById("score").innerText = String(game.score);
  }
  
  // Function to play back the computer's sequence of moves one at a time
  function showTurns() {
    game.turnNumber = 0;
    let turns = setInterval(() => {
      lightsOn(game.currentGame[game.turnNumber]);
      game.turnNumber++;
      if (game.turnNumber >= game.currentGame.length) {
        clearInterval(turns);
      }
    }, 800);
  }
  
  // Function to handle player move checking
  function playerTurn() {
    let i = game.playerMoves.length - 1;
  
    if (game.currentGame[i] === game.playerMoves[i]) {
      if (game.currentGame.length === game.playerMoves.length) {
        game.score++;
        showScore();
        addTurn();
      }
    } else {
      alert("Wrong move!");
      newGame();
    }
  }
  
  // Export all necessary functions and state for testing and interaction
  module.exports = {
    game,
    newGame,
    showScore,
    addTurn,
    lightsOn,
    showTurns,
    playerTurn
  };
  